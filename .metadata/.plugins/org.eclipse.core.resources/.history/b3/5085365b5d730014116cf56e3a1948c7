package uva.cs2110.ghosthunter;

import android.content.Context;
import android.graphics.*;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.util.AttributeSet;
import android.view.View;
import android.widget.Button;

public class GameView extends View /*implements SensorEventListener*/ {

	private static final int INTERVAL = 100;
	/*private SensorManager aSensorManager;
	private Sensor accelerometer;
	private float z;*/

	protected Player p1 = new Player();
	Thread monitorThread = (new Thread(new Monitor()));
	Paint paint = new Paint();
	BitmapFactory.Options options = new BitmapFactory.Options();
	Bitmap bg;
	Canvas canvas = new Canvas();

	public GameView(Context context, AttributeSet attrs)
	{
		super(context, attrs);
		paint.setColor(Color.parseColor("#000000"));
		options.inMutable = true;
		bg = BitmapFactory.decodeResource(getResources(), R.drawable.main_player, options);
		monitorThread.setPriority(Thread.MIN_PRIORITY);
		monitorThread.start();
	} 

	public GameView(Context context) {
		super(context);
		paint.setColor(Color.parseColor("#000000"));
		options.inMutable = true;
		bg = BitmapFactory.decodeResource(getResources(), R.drawable.main_player, options);
		monitorThread.setPriority(Thread.MIN_PRIORITY);
		monitorThread.start();

	}

	/*public GameView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
	    paint.setColor(Color.parseColor("#000000"));
	    options.inMutable = true;
	    bg = BitmapFactory.decodeResource(getResources(), R.drawable.main_player, options);        
    }*/

	protected void onDraw(Canvas canvas)	{
		//while(true)	{
		/*aSensorManager = (SensorManager)this.getContext().getSystemService(Context.SENSOR_SERVICE);
			accelerometer = aSensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);*/
		/*Button left = (Button) findViewById(R.id.MovementLeft);
		left.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				p1.moveLeft();
			}
		});
		Button right = (Button) findViewById(R.id.MovementRight);
		right.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				p1.moveRight();
			}
		});*/
		this.canvas = canvas;
		super.onDraw(this.canvas);
		this.canvas.drawBitmap(bg, p1.yPos, p1.xPos, paint); //x and y, so think of it as y and x because horizontal
		try {
			Thread.sleep(INTERVAL);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		invalidate();
		//}
	}

	/*@Override
	public final void onSensorChanged(SensorEvent event) {
		z = event.values[2];

	    if (z == 0.0){
	        p1.stop();
	    }
	    if(z >= 1.5){
	        p1.moveRight();
	    }

	    if (z <= -1.5){
	        p1.moveLeft();
	    }

	}


	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub

	}*/

	private class Monitor implements Runnable {
		public void run() {
			while (true) {
				try {
					Thread.sleep(INTERVAL);
				} catch (InterruptedException e) {
					// This should not be interrupted. If it is, just dump the stack
					// trace.
					e.printStackTrace();
				}
				postInvalidate();
			}
		}
	}


}
